# Testing calling regular function calls #

<MODES>
	# Levels #
	$HIGH
	$MED
	$LOW
	# Speeds #
	$FAST
	$NORMAL
	$SLOW

<VECTORS>
	# Actual delay vectors #
	$NONE_DELAY = 0,0
	$FAST_DELAY = 1,1
	$NORMAL_DELAY = 50,50
	$SLOW_DELAY = 150,150

<SWITCHES>
	# Commands #
	$REPEAT
	$END
	$DO_A
	$DO_B
	$DO_C

<FUNCS>
	# Basic delay function, requires D.speeds/std and V.delays/std #
	@getDelay {
	    @if $FAST {
	        @delay [$FAST_DELAY]
	    }
	    @elseif $NORMAL | $DEFAULT {
	        @delay [$NORMAL_DELAY]
	    }
	    @else {
	        @delay [$SLOW_DELAY]
	    }
	}
	# Functions to represent expressions #
	@abc {
	    abc
	}
	
	@run {
	    <0>w
	    |w|
	}
	
	@walk {
	    |w|
	}
	
	@sit {
	    d
	}
	
	@complex {
	    \<50>123abcd[MB_LEFT]|[SHIFT]
	}
	# Requires S.commands/std, tests them #
	@switches {
	    @if $END {
	        @end
	    }
	
	    r
	
	    @if $REPEAT {
	        @repeat [4] {
	            r
	        }
	    }
	    
	    @if $DO_A {
	        a
	    }
	
	    @if $DO_B {
	        b
	    }
	
	    @if $DO_C {
	        c
	    }
	}
	# Requires D.levels, uses conditions to test flags #
	@flags {
	    @if $HIGH {
	        @goto $$FLAG1
	    }
	    @elseif $MED {
	        @goto $$FLAG2
	    }
	    @else {
	        @goto $$FLAG3
	    }
	}

<MACRO>
	# Requires F.delay, F.expressions, F.flags, F.switches, D.levels and D.speeds/std, V.delays/std add M.flags #
	
	# Click w/ delay #
	@getDelay
	[MB_LEFT]
	
	# Expressions #
	@run
	|w|
	@run
	@walk
	@walk
	@sit
	@abc
	@complex
	
	# Conditional tests #
	@switches
	
	# Test flags #
	@flags
	# Put after the function call #
	a
	@end
	
	$$FLAG1
	b
	@end
	
	$$FLAG2
	c
	@end
	
	$$FLAG3
	d
	@end

